.row {
    @include clearfix;

    //padding-top: $gutter;
}

@for $i from 1 through 12 {
    .col-#{$i} {
        width: ($full / 12) * $i;
        float: left;
        box-sizing: border-box;

        &:not(:first-child) {
            padding-left: $gutter / 2;
        }

        &:not(:last-child) {
            padding-right: $gutter / 2;
        }

        &:first-child {
            padding-left: $gutter;
        }

        &:last-child {
            padding-right: $gutter;
        }

        .spacer {
            content: 'spacer';
            color: transparent;
        }
    }
}

@import 'variables';

@mixin generate-spacing ($i) {
    // Margins
    [s-mxy~="#{$i}"] {
        margin: $base-spacing-unit * $i;
    }

    [s-mx~="#{$i}"] {
        margin-left: $base-spacing-unit * $i;
        margin-right: $base-spacing-unit * $i;
    }

    [s-my~="#{$i}"] {
        margin-top: $base-spacing-unit * $i;
        margin-bottom: $base-spacing-unit * $i;
    }

    [s-ml~="#{$i}"] {
        margin-left: $base-spacing-unit * $i;
    }

    [s-mr~="#{$i}"] {
        margin-right: $base-spacing-unit * $i;
    }

    [s-mt~="#{$i}"] {
        margin-top: $base-spacing-unit * $i;
    }

    [s-mb~="#{$i}"] {
        margin-bottom: $base-spacing-unit * $i;
    }

    // Padding
    [s-pxy~="#{$i}"] {
        padding: $base-spacing-unit * $i;
    }

    [s-px~="#{$i}"] {
        padding-left: $base-spacing-unit * $i;
        padding-right: $base-spacing-unit * $i;
    }

    [s-py~="#{$i}"] {
        padding-top: $base-spacing-unit * $i;
        padding-bottom: $base-spacing-unit * $i;
    }

    [s-pl~="#{$i}"] {
        padding-left: $base-spacing-unit * $i;
    }

    [s-pr~="#{$i}"] {
        padding-right: $base-spacing-unit * $i;
    }

    [s-pt~="#{$i}"] {
        padding-top: $base-spacing-unit * $i;
    }

    [s-pb~="#{$i}"] {
        padding-bottom: $base-spacing-unit * $i;
    }

    // Gutters
    [s-row-gutter~="#{$i}"] {
        margin-left: -($base-spacing-unit * $i) / 2;
        margin-right: -($base-spacing-unit * $i) / 2;

        & > [s-col] {
            padding-left: ($base-spacing-unit * $i) / 2;
            padding-right: ($base-spacing-unit * $i) / 2
        }
    }

    [s-width~="#{$i}"] {
        width: $base-spacing-unit * 10 * $i !important;
    }
}

[s-px~="xs"] {
    padding-left: $pad-x-xs;
    padding-right: $pad-x-xs;
}

[s-py~="xs"] {
    padding-top: $pad-y-xs;
    padding-bottom: $pad-y-xs;
}

[s-pt~="xs"] {
    padding-top: $pad-y-xs;
}

[s-pb~="xs"] {
    padding-bottom: $pad-y-xs;
}

[s-pxy~="xs"] {
    padding: $pad-xs;
}

[s-py~="sm"] {
    padding-top: $pad-y-xs;
    padding-bottom: $pad-y-xs;
}

[s-pxy~="sm"] {
    padding: $pad-sm;
}

[s-px~="sm"] {
    padding-left: $pad-x-sm;
    padding-right: $pad-x-sm;
}

[s-py~="sm"] {
    padding-top: $pad-y-sm;
    padding-bottom: $pad-y-sm;
}

[s-pt~="sm"] {
    padding-top: $pad-y-sm;
}

[s-pb~="sm"] {
    padding-bottom: $pad-y-sm;
}

[s-pxy~="md"] {
    padding: $pad-md;
}

[s-px~="md"] {
    padding-left: $pad-x-md;
    padding-right: $pad-x-md;
}

[s-py~="md"] {
    padding-top: $pad-y-md;
    padding-bottom: $pad-y-md;
}

[s-pxy~="lg"] {
    padding: $pad-md;
}

[s-px~="lg"] {
    padding-left: $pad-x-lg;
    padding-right: $pad-x-lg;
}

[s-py~="lg"] {
    padding-top: $pad-y-lg;
    padding-bottom: $pad-y-lg;
}

.contain {
    position: relative;
}

.center,
[s-center] {
    position: relative;
    display: block !important;
    margin-left: auto !important;
    margin-right: auto !important;
}

.block,
[s-block] {
    display: block !important;
}

.inline-block,
[s-inline-block] {
    display: inline-block !important;
}

[s-row],
.s-row {
    @include clearfix();
}

[s-pull~="right"] {
    float: right;
}

[s-pull~="left"] {
    float: left;
}

[s-col],
[class*="s-col-"] {
    float: left;
}

@for $i from -$num-spacing-units through $num-spacing-units {
    @include generate-spacing($i);
    @include generate-spacing($i + .5);
}

@for $i from 1 through $num-cols {
    [s-col~="#{$i}"],
    .s-col-#{$i} {
        width: (100% / $num-cols) * $i;
    }

    [s-col-offset~="#{$i}"],
    .s-col-offset-#{$i} {
        margin-left: (100% / $num-cols) * $i;
    }
}

@for $i from 1 through $num-rows {
    [s-row~="#{$i}"],
    .s-row-#{$i} {
        height: ($base-spacing-unit*4) * $i;
    }
}